/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ai.improve.android;

import ai.improve.android.spi.DecisionMaker;
import ai.improve.android.spi.DefaultDecisionModel;
import ai.improve.android.xgbpredictor.ImprovePredictor;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricTestRunner;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import static ai.improve.android.DecisionTestWithModel.loadContext;
import static ai.improve.android.DecisionTestWithModel.loadVariants;

@RunWith(RobolectricTestRunner.class)
public class ImproveModelCompatTest {
    private static final Logger jul = Logger.getLogger(ImproveTrackerTest.class.getName());


    public ImproveModelCompatTest() {
    }

    @Test
    public void testModelAppended() throws Exception {
        ImprovePredictor p = new ImprovePredictor(getClass().getResourceAsStream("/model_appended.xgb"));
        System.out.println(p.getModelMetadata().getUserDefinedMetadata());
        DecisionModel model = DefaultDecisionModel.initWithModel(p);
        getPredictions(model);
    }

    private void getPredictions(DecisionModel model) throws Exception {
        List<Object> variants = loadVariants("/datasets/2bs_bible_verses_full.json");
        Map<String, Object> context = loadContext("/datasets/context_sample_1.json");
        Decision d = new DecisionMaker(variants, model, context);
        System.out.println(d.best());
    }
    @Test
    public void testCompatCheck12new() throws Exception {
        ImprovePredictor p = new ImprovePredictor(getClass().getResourceAsStream("/compat_check_1_2_0.xgb"));
        System.out.println(p.getModelMetadata().getUserDefinedMetadata());
        DecisionModel model = DefaultDecisionModel.initWithModel(p);
        getPredictions(model);

    }

    @Test
    public void testCompatCheck09new() throws Exception {
        ImprovePredictor p = new ImprovePredictor(getClass().getResourceAsStream("/compat_check_0_9_new.xgb"));
        System.out.println(p.getModelMetadata().getUserDefinedMetadata());
        DecisionModel model = DefaultDecisionModel.initWithModel(p);
        getPredictions(model);

    }


    @Test
    public void testCompatCheck100() throws Exception {
        ImprovePredictor p = new ImprovePredictor(getClass().getResourceAsStream("/compat_check_1_0_0.xgb"));
        System.out.println(p.getModelMetadata().getUserDefinedMetadata());
        DecisionModel model = DefaultDecisionModel.initWithModel(p);
        getPredictions(model);

    }

    @Test
    public void testCompatCheck110() throws Exception {
        ImprovePredictor p = new ImprovePredictor(getClass().getResourceAsStream("/compat_check_1_1_0.xgb"));
        System.out.println(p.getModelMetadata().getUserDefinedMetadata());
        DecisionModel model = DefaultDecisionModel.initWithModel(p);
        getPredictions(model);

    }

//    @Test
    public void testCompatCheck120() throws Exception {
        ImprovePredictor p = new ImprovePredictor(getClass().getResourceAsStream("/compat_check_1_2_0.xgb"));
        System.out.println(p.getModelMetadata().getUserDefinedMetadata());
        DecisionModel model = DefaultDecisionModel.initWithModel(p);
        getPredictions(model);

    }


}

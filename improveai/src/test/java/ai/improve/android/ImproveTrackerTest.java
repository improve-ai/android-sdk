/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ai.improve.android;

import ai.improve.android.spi.DefaultDecisionTracker;
import android.app.Application;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockserver.client.MockServerClient;
import org.mockserver.junit.MockServerRule;
import org.robolectric.RobolectricTestRunner;
import org.robolectric.RuntimeEnvironment;

import java.util.Collections;
import java.util.logging.Logger;

import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

@RunWith(RobolectricTestRunner.class)
public class ImproveTrackerTest {

    @Rule
    public MockServerRule mockServerRule = new MockServerRule(this, 8888);


    private static final Logger jul = Logger.getLogger(ImproveTrackerTest.class.getName());

    private MockServerClient client;
    private Application application;

    public ImproveTrackerTest() {

    }

    @BeforeClass
    public static void beforeClass() {
        System.setProperty("java.util.logging.config.file", ClassLoader.getSystemResource("logging.properties").getPath());
    }

    @Before
    public void initTest() {
        application = RuntimeEnvironment.application;

        client.reset();
        client.when(
                request()
                        .withMethod("POST")
                        .withHeader("x-api-key", "0000")
                        .withPath("/endpoint"))
                .respond(
                        response()
                                .withStatusCode(200)
                                .withBody("RESULT: OK")
                );
    }

    @Test
    public void testDecisionTracker() {
        DecisionTracker tracker = new DefaultDecisionTracker(application,"http://localhost:8888/endpoint", "0000");
        tracker.trackDecision("word", Collections.singletonList("word"), "test");
    }

    @Test
    public void testRewardTracker() {
        DecisionTracker tracker = new DefaultDecisionTracker(application,"http://localhost:8888/endpoint", "0000");
        tracker.addReward("reward", 100.23);
    }
    @Test
    public void testAnalyticsTracker() {
        DecisionTracker tracker = new DefaultDecisionTracker(application,"http://localhost:8888/endpoint", "0000");
        tracker.trackAnalyticsEvent("event1", Collections.singletonMap("propertyName", "propertyValue"));

        //ensure historyId is preserved between instances
        DecisionTracker tracker2 = new DefaultDecisionTracker(application,"http://localhost:8888/endpoint", "0000");
        tracker2.trackAnalyticsEvent("event2", Collections.singletonMap("propertyName", "propertyValue"));
    }
}
